from wildberries_parser import wildberries_parser
from datetime import datetime
from threading import Thread
from telebot import types
from markups import *
from config import *
import psycopg2
import telebot
import sqlite3
import time


def main():
    bot = telebot.TeleBot(TOKEN , parse_mode='HTML')

    global stop_keys, title, keys, connect, cursor
    stop_keys = False
    keys = "| "

    connect = psycopg2.connect(DB_URL, sslmode='require')
    cursor = connect.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS users( id text, status text, end_status text )""")    
    cursor.execute("""CREATE TABLE IF NOT EXISTS items( id text, title text, link text, key_phrases text, day text, send_date text)""")

    def parsing(id, link, key_phrases, day, send_date):
        while True:
            day = int(day)
            now = datetime.now()
            if send_date == now.strftime("%H:%M"):
                if day < 30:
                    key_phrase = list(map(str, key_phrases.split("|")))[1:-1]
                    bot.send_message(id, f"–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—à–µ–Ω –Ω–∞ {len(key_phrase)} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∫–ª—É—á–∏–≤—ã–º —Å–ª–æ–≤–∞–º")
                    ln_data = wildberries_parser(key_phrases, link)
                    text = ""

                    cursor.execute(f"UPDATE items SET day = '{day+1}' WHERE id = '{id}' AND key_phrases = '{key_phrases}'")
                    connect.commit()

                    if len(ln_data[0]) > 0:
                        text += f"–ù–∞–π–¥–µ–Ω–æ `{len(ln_data[0])}` –ø–æ–∑–∏—Ü–∏–π:"
                        for i in range(len(ln_data[0])):
                            text += f"\n`{i+1})` –ó–∞–ø—Ä–æ—Å: `{ln_data[0][i]}`,  –ü–æ–∑–∏—Ü–∏—è:  `{ln_data[1][i]}`"
                        text += "\n\n–ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –≤–µ–± –≤–µ—Ä—Å–∏–∏ —Å–∞–π—Ç–∞ –∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ –ú–æ—Å–∫–≤–∞"
                        bot.send_message(id, f"{text}", parse_mode="MARKDOWNv2")
                    else:
                        bot.send_message(id, "–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    time.sleep(86400)
                    # time.sleep(3600)
                else:
                    cursor.execute(f"DELETE FROM items WHERE id = '{id}' AND key_phrases = '{key_phrases}'")
                    connect.commit()
                    break
            time.sleep(1)

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ
    def add_item(message):
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")
        bot.register_next_step_handler(msg, add_item_title)

    def add_item_title(message):
        global title
        title = message.text
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä–∏—Ç–∫—É–ª—å(—Å—Å—ã–ª–∫–∞) –Ω–∞ —Ç–æ–≤–∞—Ä: ")
        bot.register_next_step_handler(msg, add_item_link)

    def add_item_link(message):
        global link
        link = message.text
        msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è:")
        bot.register_next_step_handler(msg, add_item_key)
        
    def add_item_key(message):
        global keys, stop_keys
        if stop_keys:
            now = datetime.now()
            cursor.execute(f'INSERT INTO items(id, title, link, key_phrases, day, send_date) VALUES (?, ?, ?, ?, ?, ?)', (message.chat.id, title, link, keys, "0", now.strftime("%H:%M")))
            connect.commit()
            stop_keys = False
            bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")
            parsing(message.chat.id, link, keys, 0, now.strftime("%H:%M"))
            keys = "| "
        else:
            key_phrase = list(map(str, keys.split("|")))[1:-1]
            if len(key_phrase) > 40:
                bot.send_message(message.chat.id, f"–ú–∞–∫—Å–∏–º—É–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ 41 —à—Ç—É–∫")
            else:
                if len(keys) != 2:
                    bot.delete_message(message.chat.id, message.id-1)
                keys += message.text + " | "
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("üìã –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫", callback_data="addItem")
                markup.add(item1)
                msg = bot.send_message(message.chat.id, f"–ö–ª—é—á–µ–≤–∏–µ —Å–ª–æ–≤–∞: {keys}", reply_markup=markup)
                bot.register_next_step_handler(msg, add_item_key)

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def is_valid(message):
        global connect, cursor
        cursor.execute(f"SELECT id FROM users WHERE id = '{message.chat.id}'")
        id = cursor.fetchone()
        if not id:
            is_valid = False
        else:
            is_valid = True
        return is_valid

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    def is_active(id):
        global connect, cursor
        cursor.execute(f"SELECT * FROM users WHERE id = '{id}'")
        user_data = cursor.fetchone()
        end_sub_date = user_data[2]
        data = end_sub_date.split("-")
        end_hour, end_minute = map(int, data[0].split(":"))
        end_month, end_day, end_year = map(int, data[1].split("/"))
        now = datetime.now()
        date = datetime(end_year, end_month, end_day, end_hour, end_minute)
        if (now-date).days >= 0:
            is_active = False 
        else:
            is_active = True
        return is_active

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
    def is_item_exist(message, title):
        global connect, cursor
        cursor.execute(f"SELECT * FROM items WHERE id = '{message.chat.id}' AND title = '{title}'")
        items = cursor.fetchone()
        if not items:
            is_item_exist = False
        else:
            is_item_exist = True
        return is_item_exist


    @bot.message_handler(commands=['start'])
    def start(message):
        global connect, cursor
        try:
            id = message.chat.id
            if not is_valid(message):
                month_days = [31,28,31,30,31,30,31,31,30,31,30,31]
                now = datetime.now()
                day = now.day
                hour = now.hour 
                minute = now.minute
                year = now.year
                month = now.month
                if month+1 > 12:
                    month= (month+1)-12
                    year+=1
                else:
                    month += 1
                day = day+30-month_days[month-1]
                end_sub_date = f"{hour}:{minute}-{month}/{day}/{year}"  
                cursor.execute(f'INSERT INTO users(id, status, end_status) VALUES (?, ?, ?)', (id, "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", end_sub_date,))
                connect.commit()
                bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ *Wildberries*\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–µ—Å—è—Ü `–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ` –ø–æ–¥–ø–∏—Å–∫–∏", parse_mode="MARKDOWNv2", reply_markup=services_menu())  
            elif not is_active(message.chat.id):
                bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ *Wildberries*\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º", parse_mode="MARKDOWNv2", reply_markup=subscribe_menu())  
            else:
                cursor.execute(f"SELECT * FROM users WHERE id = '{id}'")
                user_data = cursor.fetchone()
                status = user_data[1]
                end_sub_date = user_data[2]
                bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –≤–∞—Å –≤ –±–æ—Ç–µ –≤ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ *Wildberries*\n\n–£ –≤–∞—Å `{status}` –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ `{end_sub_date}`", parse_mode="MARKDOWNv2", reply_markup=services_menu())
        except Exception as exp:
            print(exp)            
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


    @bot.message_handler(content_types=['text'])
    def text_check(message):
        global connect, cursor
        try:
            if not is_valid(message):
                month_days = [31,28,31,30,31,30,31,31,30,31,30,31]
                now = datetime.now()
                day = now.day
                hour = now.hour 
                minute = now.minute
                year = now.year
                month = now.month
                if month+1 > 12:
                    month= (month+1)-12
                    year+=1
                else:
                    month += 1
                day = day+30-month_days[month-1]
                end_sub_date = f"{hour}:{minute}-{month}/{day}/{year}"  
                cursor.execute(f'INSERT INTO users(id, status, end_status) VALUES (?, ?, ?)', (message.chat.id, "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", end_sub_date,))
                connect.commit()
                bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ *Wildberries*\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–µ—Å—è—Ü `–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ` –ø–æ–¥–ø–∏—Å–∫–∏", parse_mode="MARKDOWNv2")  
            elif not is_active(message.chat.id):
                bot.send_message(message.chat.id, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–∞–ª—å—à–µ", parse_mode="MARKDOWNv2", reply_markup=subscribe_menu())  
            elif "‚ÇΩ" in message.text:
                period, price = map(str, message.text.split(" - "))
                price = price.replace("‚ÇΩ", "")
                bot.send_invoice(
                    chat_id=message.chat.id,
                    title=f'–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period}',
                    description="–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è",
                    invoice_payload=period,
                    provider_token=PAYMASTER_TOKEN,
                    currency='RUB',
                    photo_url='https://md-gazeta.ru/wp-content/uploads/2020/09/EFTPOS-machine_AdobeStock_smaller_140072541-scaled.jpg',
                    photo_height=256,
                    photo_width=512,
                    photo_size=512,
                    prices = [types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period}", amount=int(price)*100)],    
                    is_flexible=False,
                    start_parameter='WILDBERRIES-SUBSCRIBE'
                )
            elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ":
                add_item(message)
            elif message.text == "üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤":
                cursor.execute(f"SELECT * FROM items WHERE id = '{message.chat.id}'")
                data = cursor.fetchall()[::-1]
                ln_data = len(data)

                if ln_data > 0:
                    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
                    while ln_data != 0:
                        if ln_data > 3:
                            markup.row(data[ln_data-1][1], data[ln_data-2][1], data[ln_data-3][1])
                            ln_data -= 3
                        elif ln_data == 2:
                            markup.row(data[ln_data-1][1], data[ln_data-2][1])
                            ln_data -= 2
                        else:
                            markup.row(data[ln_data-1][1])
                            ln_data -= 1
                    markup.row("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

                    bot.send_message(message.chat.id, f"–£ –≤–∞—Å —Å–µ–π—á–∞—Å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ {len(data)} –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)
                else:
                    bot.send_message(message.chat.id, "–£ –≤–∞—Å —Å–µ–π—á–∞—Å –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                bot.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é", reply_markup=services_menu())
            elif is_item_exist(message, message.text):
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_{message.text}")
                markup.add(item1)
                bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è: ", reply_markup=markup)

        except Exception as exp:
            print(exp)
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


    @bot.pre_checkout_query_handler(func=lambda query: True)
    def pre_checkout(pre_checkout_query):
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


    @bot.message_handler(content_types=['successful_payment'])
    def successful_payment(message):
        id = message.chat.id
        period = int(message.successful_payment.invoice_payload.replace(" –º–µ—Å—è—Ü", ""))
        month_days = [31,28,31,30,31,30,31,31,30,31,30,31]
        bot.send_message(message.chat.id, f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\n–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ `–ü–ª–∞—Ç–Ω—ã–π`', parse_mode='MARKDOWNv2', reply_markup=services_menu())
        now = datetime.now()
        day = now.day
        hour = now.hour 
        minute = now.minute
        year = now.year
        month = now.month
        if month+period > 12:
            month= (month+period)-12
            year+=1
        else:
            month += period
        day = day+(period*30)-sum(month_days[month-1:period+1])

        end_sub_date = f"{hour}:{minute}-{month}/{day}/{year}"  
        cursor.execute(f"UPDATE users SET status = '–ü–ª–∞—Ç–Ω—ã–π' WHERE id = '{id}'")
        cursor.execute(f"UPDATE users SET end_status = '{end_sub_date}' WHERE id = '{id}'")
        connect.commit()


    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ call_back –∑–∞–ø—Ä–æ—Å–æ–≤     
    @bot.callback_query_handler(func=lambda call: True)
    def callback_check(call):
        global stop_keys, cursor, connect
        try:
            if "addItem" == call.data:
                stop_keys = True
                bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
            elif "delete" in call.data:
                call.data, msg_text = map(str, (call.data).split('_'))
                cursor.execute(f"DELETE FROM items WHERE id = '{call.message.chat.id}' AND title = '{msg_text}'")
                connect.commit()
                bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")

        except Exception as exp:
            print(exp)
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


    cursor.execute(f"SELECT * FROM items")
    all_data = cursor.fetchall()
    for info in all_data:
        if is_active(info[0]):
            th = Thread(target=parsing, args=(info[0], info[2], info[3], info[4], info[5],))
            th.start()
        else:
            bot.send_message(info[0], f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ *Wildberries*\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º", parse_mode="MARKDOWNv2", reply_markup=subscribe_menu()) 
            break 


    bot.polling(non_stop=True)

if __name__ == "__main__":
    main()